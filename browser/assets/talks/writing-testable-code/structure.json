{
  "ORDER": [
    "cover-01",

    "context-slide",
    "personal-code--old-patterns",

    "constructor-does-real-work--warning-signs",
    "constructor-does-real-work--code-examples-001",
    "constructor-does-real-work--code-examples-002",

    "collaborator--warning-signs",
    "collaborator--code-examples-001",
    "collaborator--code-examples-002",
    "collaborator--code-examples-003",

    "brittle-global-state-and-singletons--warning-signs",
    "brittle-global-state-and-singletons--spooky-action",
    "brittle-global-state-and-singletons--code-examples-001",
    "brittle-global-state-and-singletons--ok",

    "class-does-too-much--warning-signs-001",
    "class-does-too-much--warning-signs-002",
    "class-does-too-much--warning-signs-003",

    "context-close-slide",

    "time-for-questions"
  ],

  "STYLE": [
    ".outer-wrapper {",
    "  background: url(\"./assets/images/grid--green.webp\");",
    "  background-repeat: no-repeat;",
    "  background-size: cover;",
    "  color: #69f0ae;",
    "  font-family: Arial, sans-serif;",
    "}",
    ".italic {",
    "  font-style: italic;",
    "}",
    ".italic-green {",
    "  font-style: italic;",
    "  font-weight: bold;",
    "  color: #69f0ae;",
    "}",
    ".bold-green {",
    "  font-weight: bold;",
    "  color: #69f0ae;",
    "}",
    ".indented {",
    "  padding-left: 1em;",
    "}",
    ".code {",
    "  color: yellow;",
    "  font-family: Menlo, Monaco, \"Courier New\", monospace;",
    "}"
  ],
  
  "cover-01": {
    "title": "Writing Testable Code",
    "type": "cover-01",
    "author": "Bob Fornal",
    "bio1": "<img class=bio-logo src=./assets/images/code-squid.webp /><br/><div class=\"bold bio-header\">Entrepreneur</div>Code-squid provides solid, in-depth frontend training that is supported with real-world code projects. Blessed husband and proud father of two.",
    "bio2": "<img class=bio-logo src=./assets/images/leading-edje.webp /><br/><div class=bold>Senior Solutions Developer</div><div class=\"bold bio-header\">Leading EDJE, Inc.</div>Passionate about learning, testing, mentoring, speaking, and personal growth.",
    "notes": "This talk is a good pair to What to Avoid When Writing Unit Tests.<br/><br/>This talk is more about what to do - the right direction to take your code."
  },

  "context-slide": {
    "title": "Writing Testable Code",
    "type": "panel-double",
    "text1": "Embrace TESTABILITY ...<ul><li>Not just catching bugs.</li><li>Foster <span class=italic-green>a culture of quality and efficiency.</span></li><li>How easily software in a system can be tested.</li></ul>Highly testable code allows for ...<ul><li>More efficient and effective identification of defects.</li><li>Ensuring higher quality and reliability.</li></ul>Key characteristics of testable code include ...<ul><li><span class=bold-green>Modularity</span>: Code is organized into discrete units.</li><li><span class=bold-green>Clarity</span>: Code is understandable and its purpose is clear.</li><li><span class=bold-green>Independence</span>: Units of code can be tested in isolation without reliance on external systems or states.</li></ul>",
    "text2": "Major Talk Sections<ul><li>Constructor does Real Work</li><li>Collaborators</li><li>Brittle Global State and Singletons</li><li>Class does Too Much</li></ul>",
    "notes": "Embrace testability in code ...<ul><li>More than just catching bugs.</li><li>It's about fostering <span class=italic-green>a culture of quality and efficiency in projects.</span></li><li>How easily a software system can be tested.</li></ul>Highly testable code allows for ...<ul><li>More efficient and effective identification of defects.</li><li>Ensuring higher quality and reliability.</li></ul>Key characteristics of testable code include ...<ul><li><span class=bold-green>Modularity</span>: Code is organized into discrete units.</li><li><span class=bold-green>Clarity</span>: Code is understandable and its purpose is clear</li><li><span class=bold-green>Independence</span>: Units of code can be tested in isolation without reliance on external systems or state.s</li></ul>Major Talk Sections<ul><li>Constructor does Real Work</li><li>Collaborators</li><li>Brittle Global State and Singletons</li><li>Class does Too Much</li></ul>"
  },

  "personal-code--old-patterns": {
    "title": "Personal Examples",
    "type": "code-editor",
    "folder": "code-personal",
    "files": [
      "original.ts",
      "refactor.ts",
      "redesign.ts"
    ],
    "notes": "This is code I wrote for an Azure Node Serverless Function. The original pattern was based off of several recent articles and posts I found. The pattern worked - it's amazingly hard to test. My efforts mirror what's seen in the refactor code; it's not maintainable although it is testable. Then, I got thinking about the modern tooling available and went down an amazing rabbit hole into using JavaScript's fetch command."
  },

  "constructor-does-real-work--warning-signs": {
    "title": "Constructor does Real Work",
    "type": "panel-double",
    "text1": "Test setup is complicated by <span class=italic-green>work in the constructor</span> such as:<ul><li>Creating or initializing collaborators.</li><li>Communicating with other services.</li><li>Logic to set up its own state.</li></ul>In the constructor in attribute declaration watch for ...<br/><ul><li><span class=code>new</span> keyword.</li><li>Static method calls.</li><li>Control flow (conditional or looping logic).</li><li>... anything more than assignment.</li></ul>",
    "text2": "When constructing the class in isolation or with test-double collaborators ...<ul><li>How hard is it?</li></ul>If it's hard:<ul><li>You are doing too much work in the constructor!</li></ul>If it's easy:<ul><li>Pat yourself on the back.</li></ul>",
    "notes": "When a constructor has to instantiate and initialize its collaborators, the result tends to be an inflexible and prematurely coupled design. Such constructors shut off the ability to inject test collaborators when testing.<br/><br/><span class=italic-green>It violates the Single Responsibility Principle</span><br/><br/>When collaborator construction is mixed with initialization, it suggests that there is only one way to configure the class, which closes off reuse opportunities that might otherwise be available.<br/><br/><span class=italic-green>Testing Directly is Difficult</span><br/><br/>Testing such constructors is difficult.<ol><li>To instantiate an object, the constructor must execute.</li><li>And, if that constructor does lots of work, you are forced to do that work when creating the object in tests.</li><li>If collaborators access external resources (e.g. files, network services, or databases), subtle changes in collaborators may need to be reflected in the constructor, but may be missed due to missing test coverage from tests that weren't written because the constructor is so difficult to test.</li></ol>We end up in a vicious cycle."
  },
  "constructor-does-real-work--code-examples-001": {
    "title": "Constructor does Real Work",
    "type": "code-editor",
    "folder": "code-001",
    "files": [
      "hard-to-test.js",
      "hard-to-test.spec.js",
      "testable-and-flexible.js",
      "testable-and-flexible.spec.js"
    ],
    "notes": "Fundamentally, \"Work in the Constructor\" amounts to doing anything that makes instantiating your object difficult or introducing test-double objects difficult.<br/><br/>This example mixes object creation with logic.<ul><li>In tests we often want to create different data than in production.</li><li>Usually it is a smaller dataset with some objects replaced with test-doubles.</li><li>By leaving the new operators inline we will never be able to create a set of objects for testing.</li></ul>"
  },
  "constructor-does-real-work--code-examples-002": {
    "title": "Constructor does Real Work",
    "type": "code-editor",
    "folder": "code-002",
    "files": [
      "hard-to-test.js",
      "hard-to-test.spec.js",
      "testable-and-flexible.js",
      "testable-and-flexible.spec.js"
    ],
    "notes": "When configuration and instantiation are mixed together in the constructor, objects become more brittle and tied to concrete data structures. This makes code harder to modify, and (more or less) impossible to test."
  },

  "collaborator--warning-signs": {
    "title": "Collaborators",
    "type": "panel-double",
    "text1": "Avoid <span class=italic-green>holder</span>, <span class=italic-green>context</span>, and <span class=italic-green>\"kitchen sink\"</span> objects; they...<ul><li>Take all sorts of other objects.</li><li>Are a grab bag of collaborators.</li><li>Pass in the specific object you need as a parameter.</li><li>Need to reach into one object, to get another, etc.</li></ul>The chain does not need to be deep.<ul><li>If you count more than one period (.) in the chain, you're looking right at an example of this flaw.</li></ul>",
    "text2": "Issues<ul><li>Objects are passed in but never used directly (only used to get access to other objects).</li><li>Law of Demeter violation: method call chain walks an object graph with more than one dot (.).</li><li>Suspicious names: context, environment, principal, container, or manager.",
    "notes": "<span class=italic-green>Makes for Brittle Code</span><br/><br/>Imagine when something needs to change, and you have all these \"Middle Men\" that are used to dig around in and get the objects you need. Many of them will need to be modified to accommodate new interactions. Instead, try to get the most specific object that you need, where you need it. (In the process you may discover a class needs to be split up, because it has more than one responsibility. Don't be afraid; strive for the Single Responsibility Principle).<br/><br/><span class=italic-green>Bloats your Code and Complicates what's Really Happening</span><br/><br/>With all these intermediary steps to dig around and find what you want; your code is more confusing. And it's longer than it needs to be.<br/><br/><span class=italic-green>Hard to Test</span><br/><br/>If you have to test a method that takes an object, when you exercise that method it's hard to guess what is pulled out and what's not. Typically this means we pass in an empty context, get some null pointers, then set some state in the context and try again. We repeat until all the null pointers go away. See also Breaking the Law of Demeter is Like Looking for a Needle in the Haystack."
  },
  "collaborator--code-examples-001": {
    "title": "Collaborators",
    "type": "code-editor",
    "folder": "code-003",
    "files": [
      "hard-to-test.js",
      "hard-to-test.spec.js",
      "testable-and-flexible.js",
      "testable-and-flexible.spec.js"
    ],
    "notes": "This example mixes object lookup with calculation. The core responsibility is to multiply an amount by a tax rate."
  },
  "collaborator--code-examples-002": {
    "title": "Collaborators",
    "type": "code-editor",
    "folder": "code-004",
    "files": [
      "hard-to-test.js",
      "hard-to-test.spec.js",
      "testable-and-flexible.js",
      "testable-and-flexible.spec.js"
    ],
    "notes": "The most common Law of Demeter violations have many chained calls, however this example shows that you can violate it with a single chain. For testing the original code we had to mock out the client and request. Also, the test has intimate knowledge of the implementation details. In the fixed code we didn't have to mock the data as deeply. This is easier, and helps our code be less brittle."
  },
  "collaborator--code-examples-003": {
    "title": "Collaborators",
    "type": "code-editor",
    "folder": "code-005",
    "files": [
      "not-a-flaw.js"
    ],
    "notes": "<span class=italic-green>Domain Specific Languages can violate the Law of Demeter for Ease of Configuration</span><br/><br/>This may be acceptable if working in some Domain Specific Languages. They violate the Law of Demeter for ease of configuration. This is not a problem because it is building up a value object, in a fluent, easily understandable way."
  },

  "brittle-global-state-and-singletons--warning-signs": {
    "title": "Brittle Global State and Singletons",
    "type": "panel-double",
    "text1": "Global State and Singletons obscure the true dependencies.<ul><li>Accessing global state statically does not clarify shared dependencies to readers of the code that uses the Global State.</li><li>To really understand the dependencies, developers must read every line of code.</li></ul>It causes <span class=italic-green>Spooky Action at a Distance</span>:<ul><li>When running test suites, global state mutated in one test can cause a subsequent or parallel test to fail unexpectedly.</li></ul>Break the static dependency using dependency injection.<br/>",
    "text2": "Issues<ul><li>Adding or using singletons.</li><li>Adding or using static fields or static methods.</li><li>Adding or using static initialization blocks.</li><li>Adding or using registries.</li><li>Adding or using service locators.</li></ul>NOTE:<br/><br/><div class=indented>\"Singleton\" here is the classic Gang of Four singleton.<br/><br/>An “application singleton” on the other hand is an object which has a single instance in our application, but which does not enforce its own \"singletonness.\"</div>",
    "notes": "Scenario: My structure and simple test coverage; 4 teams using the same codebase.<ul><li>Saw an issue with a single test.</li><li>Realized, it might be prevalent in the codebase.</li><li>Had to run each test suite independently.</li><li>Had to run individual tests individually.</li></ul>The root problem with global state is that it is globally accessible. In an ideal world, an object should be able to interact only with other objects which were directly passed into it (through a constructor, or method call).<br/><br/>In other words, if I instantiate two objects A and B, and I never pass a reference from A to B, then neither A nor B can get hold of the other or modify the other's state. This is a very desirable property of code. If I don't tell you about something, then it is not yours to interact with!"
  },
  "brittle-global-state-and-singletons--spooky-action": {
    "title": "Spooky Action at a Distance",
    "type": "panel-double",
    "text1": "<span class=italic-green>This can only happen via Global State.</span><br/><br/>This is when ...<ul><li>Code is run in isolation (nothing passed in).</li><li>Unexpected interactions and state changes happen in distant locations of the system.</li></ul>Use static state (Global State) ...<ul><li>Creates hidden communication channels.</li><li>Obscures the codebase.</li></ul>",
    "text2": "Spooky Action at a Distance ...<ul><li>Forces developers to read every line of code to understand the potential interactions.</li><li>Lowers developer productivity.</li><li>Confuses new team members.</li></ul>",
    "notes": "<span class=italic-green>This can only happen via Global State.</span><br/><br/>This is when ...<ul><li>Code is run in isolation (nothing passed in).</li><li>Unexpected interactions and state changes happen in distant locations of the system.</li></ul>Use static state (Global State) ...<ul><li>Creates hidden communication channels.</li><li>Obscures the codebase.</li></ul>Spooky Action at a Distance ...<ul><li>Forces developers to read every line of code to understand the potential interactions.</li><li>Lowers developer productivity.</li><li>Confuses new team members.</li></ul>"
  },
  "brittle-global-state-and-singletons--code-examples-001": {
    "title": "Brittle Global State and Singletons",
    "type": "code-editor",
    "folder": "code-006",
    "files": [
      "hard-to-test.js",
      "hard-to-test.spec.js",
      "testable-and-flexible.js",
      "testable-and-flexible.spec.js"
    ],
    "notes": "Sometimes you will be stuck with a static method in a library that you need to prevent from running in a test (TrackStatusChecker).<ul><li>But you need the library so you can't remove or replace it with a non-static implementation.</li><li>Because it is a library, you don't have the control to remove the static modifier and make it an instance method.</li></ul>"
  },
  "brittle-global-state-and-singletons--ok": {
    "title": "When is Global State OK?",
    "type": "panel-double",
    "text1": "When the reference is a constant and the object it points to is either primitive or immutable.<br/><br/><span class=code>const URL = \"http://google.com\";</span><br/><br/>... is OK since there is no way to mutate the value.",
    "text2": "When the information only travels one way.<br/><br/>For example a Logger is one big singleton.<ul><li>However our application only writes to logger and never reads from it.</li><li>More importantly our application does not behave differently based on what is or is not enabled in our logger.</li></ul>",
    "notes": "There are two cases when global state is tolerable.<br/><ol><li>Remember, the transitive closure of all objects you are pointing to must be immutable as well since globality is transitive. The String is safe, but replace it with a MyObject, and it gets be risky due to the transitive closure of all state MyObject exposes. You are on thin ice if someone in the future decides to add mutable state to your immutable object and then your innocent code changes into a headache.</li><li>While it is not a problem from test point of view, it is a problem if you want to assert that your application does indeed log important messages. This is because there is no way for the test to replace the Logger with a test-double (I know we can set our own handler for log level, but those are just more of the problems shown above). If you want to test the logger then change the class to dependency inject in the Logger so that you can insert a MockLogger and assert that the correct things were written to the Logger. (As a convenience, Guice automatically knows how to Constructor Inject a configured logger for any class, just add it to the constructor's params and the right one will be passed in.)</li></ol>"
  },

  "class-does-too-much--warning-signs-001": {
    "title": "Class Does Too Much",
    "type": "panel-double",
    "text1": "The class has too many responsibilities.<ul><li>Interactions between responsibilities are buried within the class.</li><li>Tests do not have a clear seam between these interactions.</li></ul>Construction of dependent components is a responsibility that should be isolated from the class's real responsibility.<ul><li>Use dependency injection to pass in pre-configured objects.</li><li>Extract classes with single responsibilities.</li></ul>",
    "text2": "Considerations ...<ul><li>Summing up what the class does includes the word <span class=code>and</span>.</li><li>Class would be challenging for new team members to read and \"get it quickly.\"</li><li>Class has fields that are only used in some methods.</li><li>Class has static methods that only operate on parameters.</li></ul>",
    "notes": "The class has too many responsibilities.<ul><li>Interactions between responsibilities are buried within the class.</li><li>Tests do not have a clear seam between these interactions.</li></ul>Construction of dependent components is a responsibility that should be isolated from the class's real responsibility.<ul><li>Use dependency injection to pass in pre-configured objects.</li><li>Extract classes with single responsibilities.</li></ul>Considerations ...<ul><li>Summing up what the class does includes the word <span class=code>and</span>.</li><li>Class would be challenging for new team members to read and \"get it quickly.\"</li><li>Class has fields that are only used in some methods</li><li>Class has static methods that only operate on parameters</li></ul>"
  },
  "class-does-too-much--warning-signs-002": {
    "title": "Class Does Too Much",
    "type": "panel-single",
    "text1": "When classes have a large span of responsibilities and activities, you end up with code that is:<br/><ul><li>Hard to debug.</li><li>Hard to test.</li><li>Non-extensible system.</li><li>Difficult for onboarding developers.</li><li>Hard to hand off.</li><li>Not subject to altering behavior via standard mechanisms: decorator, strategy, subclassing.</li><li>A class that is hard to name.</li></ul>",
    "notes": "When classes have a large span of responsibilities and activities, you end up with code that is:<br/><ul><li>Hard to debug.</li><li>Hard to test.</li><li>Non-extensible system.</li><li>Difficult for onboarding developers.</li><li>Hard to hand off.</li><li>Not subject to altering behavior via standard mechanisms:<ul><li>decorator</li><li>strategy</li><li>subclassing</li></ul><li>You end up adding another conditional test</li><li>Hard to give a name to describe what the class does.<ul><li>Whenever struggling with a name, the code is telling you that the responsibilities are muddled.</li><li>When objects have a clear name, it is easy to keep them focused and shear off any excess baggage.</li></ul></li></ul>"
  },
  "class-does-too-much--warning-signs-003": {
    "title": "Class Does Too Much (Fixing)",
    "type": "panel-single",
    "text1": "A class that does too much, should be split up ...<br/><ol><li>Identify the individual responsibilities.</li><li>Name each one crisply.</li><li>Extract functionality into a separate class for each responsibility.</li><li>One class may perform the hidden responsibility of mediating between the others.</li><li>Celebrate that now you can test each class in isolation much easier than before.</li></ol>If working with a legacy class that did too much, and you can't fix the whole legacy problem today, you can at least:<br/><ol><li>Sprout a new class with the sole responsibility of the new functionality.</li><li>Extract a class where you are altering existing behavior.</li></ol>",
    "notes": "A class that does too much, should be split up ...<br/><ol><li>Identify the individual responsibilities.</li><li>Name each one crisply.</li><li>Extract functionality into a separate class for each responsibility.</li><li>One class may perform the hidden responsibility of mediating between the others.</li><li>Celebrate that now you can test each class in isolation much easier than before.</li></ol>If working with a legacy class that did too much, and you can't fix the whole legacy problem today, you can at least:<br/><ol><li>Sprout a new class with the sole responsibility of the new functionality.</li><li>Extract a class where you are altering existing behavior. As you work on existing functionality, (i.e. adding another conditional) extract a class pulling along that responsibility. This will start to take chunks out of the legacy class, and you will be able to test each chunk in isolation (using Dependency Injection).</li></ol><span class=italic-green>Caveat: Living with the Flaw</span><br/><br/>Some legacy classes are \"beyond the scope of what can be done quickly.\" It may be unreasonable for a reviewer to demand a large, pre-existing problem be fixed in order to make a small change. But it is reasonable to draw a line in the sand and request that the author take steps in the right direction instead of making a bad situation worse. For example, sprout a new class instead of adding another responsibility to an existing, hard to test, object."
  },

  "context-close-slide": {
    "title": "Writing Testable Code",
    "type": "panel-double",
    "text1": "Testability is ...<ul><li>Not a standalone feature.</li><li>It is a fundamental aspect of <span class=italic-green>good code design</span>.</li></ul>To develop more robust and maintainable code, developers need to (from the start) consider:<ul><li>End-user experience.</li><li>System requirements.</li></ul>Ensuring that the code not only meets its ...<ul><li><span class=italic-green>Functional requirements</span>.</li><li><span class=italic-green>Resilient and adaptable to change</span>.</li></ul>",
    "text2": "We've covered ...<ul><li>Constructor does Real Work</li><li>Collaborators</li><li>Brittle Global State and Singletons</li><li>Class does Too Much</li></ul>",
    "notes": "Testability is ...<ul><li>Not a standalone feature</li><li>But, a fundamental aspect of good code design</li></ul>Developers need to consider the end-user experience and system requirements right from the start, leading to more robust and maintainable code. It ensures that the code not only meets its functional requirements but is also resilient and adaptable to change.<br/><br/>We've covered ...<ul><li>Constructor does Real Work</li><li>Collaborators</li><li>Brittle Global State and Singletons</li><li>Class does Too Much</li></ul>"
  },

  "sponsors": {
    "title": "",
    "type": "image-only",
    "background": "transparent",
    "image": "./assets/images/Thank-You-TechBash-2024-Sponsors.jpeg",
    "notes": ""
  },

  "time-for-questions": {
    "title": "",
    "type": "image-only",
    "background": "transparent",
    "image": "./assets/images/time-for-questions--wtc-qr.webp",
    "notes": ""
  }
}