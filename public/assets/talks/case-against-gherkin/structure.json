{
  "ORDER": [
    "cover-01",
    "edje-about",
    "gherkin-definition-01",
    "gherkin-definition-02",
    "gherkin-definition-03a",
    "gherkin-pros-01",
    "gherkin-cons-01",
    "code-first-automation-01a",
    "code-first-automation-01b",
    "code-first-automation-02a",
    "code-first-automation-02b",
    "code-first-automation-03",
    "gherkin-alternatives-01",
    "gherkin-definition-03b",
    "gherkin-definition-04",
    "time-for-questions"
  ],
  "STYLE": [
    ".outer-wrapper {",
    "  background: url(\"./assets/images/grid--green.webp\");",
    "  background-repeat: no-repeat;",
    "  background-size: cover;",
    "  color: #69f0ae;",
    "  font-family: Arial, sans-serif;",
    "}",
    ".cover-wrapper .cover--bio {",
    "  width: 42em !important;",
    "}",
    ".cover--bio .bio-logo {",
    "  margin-bottom: 1em;",
    "}",
    ".right-align {",
    "  display: flex;",
    "  flex-direction: column;",
    "  align-items: end;",
    "}",
    ".left-align {",
    "  display: flex;",
    "  flex-direction: column;",
    "  align-items: start;",
    "}",
    ".green {",
    "  color: #69f0ae;",
    "}",
    ".orange {",
    "  color: #f0c369;",
    "}",
    ".code {",
    "  color: yellow;",
    "  font-family: Menlo, Monaco, \"Courier New\", monospace;",
    "}",
    ".level-one {",
    "  margin: 0;",
    "  text-indent: -1em;",
    "  padding-left: 1em;",
    "  font-family: Menlo, Monaco, \"Courier New\", monospace;",
    "  font-size: 0.8em;",
    "}",
    ".level-two {",
    "  margin: 1em 0 0 1em;",
    "  text-indent: -1em;",
    "  padding-left: 1em;",
    "  font-family: Menlo, Monaco, \"Courier New\", monospace;",
    "  font-size: 0.8em;",
    "}",
    ".level-three {",
    "  margin: 0 0 0 2em;",
    "  text-indent: -1em;",
    "  padding-left: 1em;",
    "  font-family: Menlo, Monaco, \"Courier New\", monospace;",
    "  font-size: 0.8em;",
    "}",
    ".code-purple {",
    "  color: #d678ed;",
    "}",
    ".code-red {",
    "  color: #e9636c;",
    "}",
    ".code-orange {",
    "  color: #d19966;",
    "}",
    ".code-white {",
    "  color: #dde1ef;",
    "}",
    ".code-yellow {",
    "  color: #98d379;",
    "}",
    ".match-height {",
    "  max-height: 100%;",
    "  max-width: 100%;",
    "}",
    ".center {",
    "  display: flex;",
    "  flex-direction: column;",
    "  align-items: center;",
    "  height: 100%;",
    "}"
  ],
  "cover-01": {
    "title": "Gherkin: Friend or Foe? Re-Evaluating Its Role in Modern Development",
    "type": "cover-01",
    "author": "Bob Fornal",
    "bio1": "<img class=bio-logo src=./assets/images/code-squid.webp />\n<br/>\n<div class=\"bold bio-header\">Entrepreneur</div>Code-squid provides solid, in-depth frontend training that is supported with real-world code projects. Blessed husband and proud father of two.\n<br/>\n<br/>\n<div class=bold>https://code-squid.com</div>",
    "bio2": "<img class=bio-logo src=./assets/images/leading-edje.webp />\n<br/>\n<div class=bold>Senior Solutions Developer</div>\n<div class=\"bold bio-header\">Leading EDJE, Inc.</div>Passionate about learning, testing, mentoring, speaking, and personal growth.\n<br/>\n<br/>\n<div class=bold>https://leadingedje.com</div>"
  },
  "edje-about": {
    "title": "",
    "type": "GLOBAL/edje-about--centered",
    "visibility": true
  },

  "gherkin-definition-01": {
    "title": "What is Gherkin?",
    "type": "panel-double",
    "text1": "<div><span class=orange>Gherkin</span> is a structured, human-readable language used in software development, particularly within the context of <span class=orange>Behavior-Driven Development (BDD)</span>. <ul> <li>It is designed to express <span class=orange>test scenarios</span> and <span class=orange>user stories</span> in a way that's clear, concise, and understandable by both technical and non-technical stakeholders.</li> <li>It uses keywords like <span class=code-yellow>Given</span>, <span class=code-yellow>When</span>, <span class=code-yellow>Then</span>, <span class=code-yellow>And</span>, and <span class=code-yellow>But</span> to describe the context, actions, and expected results of a scenario.</li> </ul> <div>In essence, <span class=orange>Gherkin</span> ...</div> <ul> <li>Bridges the gap between business requirements and technical implementation.</li> <li>It provides a common language for expressing and documenting software behavior.</li> </ul>",
    "text2": "<div class=level-one> <span class=code-purple>Feature</span><span class=code-white>:</span> <span class=code-red>Effective Use of Gherkin in Automated Testing</span> </div> <div class=level-two> <span class=code-purple>Background</span><span class=code-white>:</span> </div> <div class=level-three> <span class=code-orange>Given</span> <span class=code-white>Gherkin is a domain-specific language used for behavior-driven development (BDD)</span> </div> <div class=level-three> <span class=code-orange>And</span> <span class=code-white>it is intended to bridge communication between technical and non-technical stakeholders</span>",
    "notes": "<div><span class=orange>Gherkin</span> ...</div> <ul> <li>... is a structured, human-readable language used in software development, <span class=orange>BDD</span></li> <li>... expressed through <span class=orange>test scenarios</span> and <span class=orange>user stories</span>: clear, concise, and understandable by both technical and non-technical stakeholders.</li> <li>... bridges the gap between business requirements and technical implementation.</li> <li>... provides a common language for expressing and documenting software behavior.</li> </ul> "
  },
  "gherkin-definition-02": {
    "title": "What is Gherkin?",
    "type": "panel-double",
    "text1": "<div class=green>Definition</div> <ul> <li>Structured Language</li> <li>Human Readable</li> <li>Used in BDD</li> <li>Linked to Automation</li> </ul> <div class=green>Benefits</div> <ul> <li>Improved Communication</li> <li>Clear documentation</li> <li>Increased efficiency</li> <li>Easier to understand</li> </ul>",
    "text2": "<div class=level-one> <span class=color-purple>Feature</span><span class=code-white>:</span> <span class=code-red>Effective Use of Gherkin in Automated Testing</span> (<span class=code-white>continued</span>) </div>  </div> <div class=level-two> <span class=code-purple>Scenario</span><span class=code-white>:</span> <span class=code-red>Understanding the dual nature of Gherkin in development</span> </div> <div class=level-three> <span class=code-orange>Given</span> <span class=code-white>Gherkin uses structured keywords such as <span class=code-yellow>\"Feature\"</span>, <span class=code-yellow>\"Scenario\"</span>, <span class=code-yellow>\"Given\"</span>, <span class=code-yellow>\"When\"</span>, <span class=code-yellow>\"Then\"</span>, <span class=code-yellow>\"And\"</span>, and <span class=code-yellow>\"But\"</span> </span> </div> <div class=level-three> <span class=code-orange>When</span> <span class=code-white>it is used well, it enhances communication and collaboration</span> </div> <div class=level-three> <span class=code-orange>Then</span> <span class=code-white>it improves the readability and understanding of software specifications</span> </div>",
    "notes": "<div class=green>Definition</div> <ul> <li>Structured Language</li> <li>Human Readable</li> <li>Used in BDD</li> <li>Linked to Automation</li> </ul> <div class=green>Benefits</div> <ul> <li>Improved Communication</li> <li>Clear documentation</li> <li>Increased efficiency</li> <li>Easier to understand</li> </ul>"
  },
  "gherkin-definition-03a": {
    "title": "When is Gherkin Used",
    "type": "panel-single-table",
    "table": [
      [
        "<div class=green>Card Type</div>",
        "Gherkin Use",
        "Impact"
      ],
      [
        "<div class=green>Epics</div>",
        "NO",
        ""
      ],
      [
        "<div class=green>Stories</div>",
        "<div class=bold>Behavior Driven Development</div>",
        "Too General"
      ],
      [
        "<div class=green>Tasks</div>",
        "(often)",
        "Specific"
      ],
      [
        "<div class=green>Sub-Tasks</div>",
        "(often)",
        "Too Specific (or not used)"
      ],
      [
        "<div class=green>Bugs</div>",
        "(somtimes)",
        "<div class=bold>Good Fit</div>"
      ],
      [
        "<div class=green>Custom</div>",
        "?",
        "?"
      ]
    ],
    "notes": "<ul> <li>Card Type: <span class=green>EPIC</span>: Gherkin Use: No, Impact: N/A</li> <li>Card Type: <span class=green>STORY</span>: Gherkin Use: BDD, Impact: Too General</li> <li>Card Type: <span class=green>TASK</span>: Gherkin Use: Often, Impact: Specific</li> <li>Card Type: <span class=green>SUB-TASKS</span>: Gherkin Use: Often, Impact: Too Specific (or not used)</li> <li>Card Type: <span class=green>BUGS</span>: Gherkin Use: Somtimes, Impact: Good Fit</li> <li>Card Type: <span class=green>CUSTOM</span>: Gherkin Use: ?, Impact: ?</li> </ul>"
  },

  "gherkin-pros-01": {
    "title": "Gherkin: Pros",
    "type": "panel-double",
    "text1": "<div class=green>Benefits of using Gherkin:</div> <ul> <li><span class=orange>Improved communication</span>: Gherkin enables better collaboration between different stakeholders.</li> <li><span class=orange>Clear documentation</span>: Gherkin specifications serve as documentation for the software's behavior.</li> <li><span class=orange>Increased efficiency</span>: Automated tests based on Gherkin specifications can be run quickly and consistently.</li> <li><span class=orange>Easier to understand</span>: The plain English syntax makes it easier for non-technical people to understand the software's functionality.</span></li> </ul>",
    "text2": "<div class=level-one> <span class=color-purple>Feature</span><span class=code-white>:</span> <span class=code-red>Effective Use of Gherkin in Automated Testing</span> (<span class=code-white>continued</span>) </div> <div class=level-two><span class=code-purple>Scenario</span><span class=code-white>:</span> <span class=code-red>Identifying potential pitfalls of Gherkin</span> </div> <div class=level-three> <span class=code-orange>Given</span> <span class=code-white>some implementations of Gherkin can sabotage the development process</span> </div> <div class=level-three> <span class=code-orange>When</span> <span class=code-white>there are unclear feature descriptions</span> </div> <div class=level-three> <span class=code-orange>And</span> <span class=code-white>scenarios become overly complex</span> </div> <div class=level-three> <span class=code-orange>And</span> <span class=code-white>there is misalignment between tests and actual business requirements</span> </div> <div class=level-three> <span class=code-orange>Then</span> <span class=code-white>Gherkin can hinder automated testing and development progress</span> </div>",
    "notes": "<div class=green>Benefits of using Gherkin:</div> <ul> <li><span class=orange>Improved communication</span>: Gherkin enables better collaboration between different stakeholders.</li> <li><span class=orange>Clear documentation</span>: Gherkin specifications serve as documentation for the software's behavior.</li> <li><span class=orange>Increased efficiency</span>: Automated tests based on Gherkin specifications can be run quickly and consistently.</li> <li><span class=orange>Easier to understand</span>: The plain English syntax makes it easier for non-technical people to understand the software's functionality.</span></li> </ul> <div>Gherkin is a powerful tool ...</div> <ul> <li>for defining and documenting software behavior</li> <li>in a way that is understandable, collaborative, and automatable.</li> </ul> <hr/> <div>The idea behind Gherkin makes sense: <ul> <li>define acceptance criteria</li> <li>in a readable format</li> <li>to improve collaboration between business and technical teams.</li> <li>In theory, these scenarios should bridge the gap between requirements and automation.</li> </ul>"
  },
  "gherkin-cons-01": {
    "title": "Gherkin: Cons",
    "type": "panel-double",
    "text1": "<div class=green>Pitfalls of Gherkin</div> <ol> <li><span class=orange>Extra Layer of Complexity</span>: Need to create feature files that then need to be linked to step definitions.</li> <li><span class=orange>Two Truths</span>: The scenarios often don't lend themselves well to automation. Some steps need more thought and detail to become effective automation tests. </li> <li><span class=orange>Harder to Read Tests</span>: As feature files grow, the scenarios become more generic. Tests become a tangled mess of steps and lose clarity.</li> <li><span class=orange>Slower Test Execution</span>: An extra execution layer simply makes tests run slower.</li> <li><span class=orange>Over-Specification</span>: In an attempt to cover every angle, teams end up adding way too much detail to the scenarios.</li> </ol>",
    "text2": "<div class=level-one> <span class=color-purple>Feature</span><span class=code-white>:</span> <span class=code-red>Effective Use of Gherkin in Automated Testing</span> (<span class=code-white>continued</span>) </div> <div class=level-two><span class=code-purple>Scenario</span><span class=code-white>:</span> <span class=code-red>Using Gherkin properly</span> </div> <div class=level-three> <span class=code-orange>Given</span> <span class=code-white>there are common mistakes in implementing Gherkin</span> </div> <div class=level-three> <span class=code-orange>When</span> <span class=code-white>strategies are put in place to mitigate issues</span> </div> <div class=level-three> <span class=code-orange>Then</span> <span class=code-white>Gherkin can be used effectively to support and enhance testing processes</span> </div> <div class=level-three> <span class=code-orange>And</span> <span class=code-white>development efforts can become more efficient</span> </div>",
    "notes": "<ul> <li>Plenty of teams start out with good intentions</li> <li>embedding Gherkin scenarios into user stories and automation suites.</li> <li>But that's usually where it ends.</li> <li>Non-technical <span class=orange>stakeholders rarely engage</span> with the feature files</li> <li>so Gherkin just becomes an <span class=orange>extra layer of abstraction and maintenance</span>.</li> </ul> <ol> <li>Extra Layer of Complexity: Do these tests meet acceptance criteria? Left maintaining both the feature files and the test code.</li> <li>Two Truths:, the business version of the scenarios and the technical team's version.</li> <li>Harder to Read Tests: The overall value of the tests is reduced.</li> <li>The code is first interpreted (feature files), adding overhead. This seriously slows down feedback loops. Without proper optimization, execution slows down.</li> <li>This not only adds confusion but also makes maintenance a nightmare.</li> <ol>"
  },
  "code-first-automation-01a": {
    "title": "Consider: Code First Automation",
    "type": "panel-double",
    "text1": "<div>A code-first approach to test automation ...</div> <ol> <li><span class=orange>Efficiency & Speed</span>: One of the biggest advantages of a code-first approach is efficiency.</li> </ol>",
    "text2": "<div class=level-one> <span class=color-purple>Feature</span><span class=code-white>:</span> <span class=code-red>Effective Use of Gherkin in Automated Testing</span> (<span class=code-white>continued</span>) </div> <div class=level-two><span class=code-purple>Scenario</span><span class=code-white>:</span> <span class=code-red>Gaining practical insights into Gherkin usage</span> </div> <div class=level-three> <span class=code-orange>Given</span> <span class=code-white>attendees are seeking practical tips for using Gherkin</span> </div> <div class=level-three> <span class=code-orange>When</span> <span class=code-white>they are provided with recommended practices for optimizing Gherkin</span> </div> <div class=level-three> <span class=code-orange>Then</span> <span class=code-white>they can ensure Gherkin is a powerful tool to aid in the development process</span> </div>",
    "notes": "<div>A code-first approach to test automation has clear advantages. With code-first, you're writing tests directly in the programming language that the application is built in, giving you much more flexibility and control over your tests.</div> <ol> <li>You bypass the need for Gherkin's extra abstraction layers and directly automate tests using the programming language of your application. This results in faster execution times because there's no interpretation or mapping between the test steps and the code.</li> </ol>"
  },
  "code-first-automation-01b": {
    "title": "Simple Login Testing",
    "type": "code-editor",
    "folder": "gherkin-01",
    "files": [
      "login.feature",
      "login.js",
      "code-first.js"
    ],
    "notes": "<div>Try annotating the process ...</div> <ol> <li>Navigate to the login page.</li> <li>Fill in username and password,</li> <li>Click the login button.</li> <li>Verify the user arrived on the dashboard page.<.li> </ol>"
  },
  "code-first-automation-02a": {
    "title": "Consider: Code First Automation",
    "type": "panel-double",
    "text1": "<div>A code-first approach to test automation ...</div> <ol> <li><span class=orange>Efficiency & Speed</span>: One of the biggest advantages of a code-first approach is efficiency.</li> <li><span class=orange>More Suitable for API Testing</span>: Cleaner, more direct, and faster.</li> </ol>",
    "text2": "<div class=level-one> <span class=color-purple>Feature</span><span class=code-white>:</span> <span class=code-red>Effective Use of Gherkin in Automated Testing</span> (<span class=code-white>continued</span>) </div> <div class=level-two><span class=code-purple>Scenario</span><span class=code-white>:</span> <span class=code-red>Gaining practical insights into Gherkin usage</span> </div> <div class=level-three> <span class=code-orange>Given</span> <span class=code-white>attendees are seeking practical tips for using Gherkin</span> </div> <div class=level-three> <span class=code-orange>When</span> <span class=code-white>they are provided with recommended practices for optimizing Gherkin</span> </div> <div class=level-three> <span class=code-orange>Then</span> <span class=code-white>they can ensure Gherkin is a powerful tool to aid in the development process</span> </div>",
    "notes": "<ol> <li>Gherkin lends itself for being focused on isolated business rules. Small test cases that provide value.</li> <li>The entire notion of deciding who the end user is in the situation where we're wanting to test integrations between systems can cause confusion. This can then introduce unnecessary complexity and doesn't add any real value.</li> </ol> <ul> <li>There's no need to translate test steps from feature files to step definitions, no extra parsing, and debugging is far easier.</li> <li>You can immediately see that it is still simple to follow.</li> <li>It will execute faster, it is cleaner and more direct.</li> <li>There is no need to add the glue for the step definitions.</li> </ul>"
  },
  "code-first-automation-02b": {
    "title": "Simple API Testing",
    "type": "code-editor",
    "folder": "gherkin-02",
    "files": [
      "api.feature",
      "api.js",
      "code-first.js"
    ],
    "notes": "<div>Try annotating the process ...</div> <ol> <li>Verify that a list of fruits can be retrieved.</li> <li>Verify that a new fruit can be added.</li> </ol> <div>This formatting allows the team to account for variations and exceptions quicker and easier.</div>"
  },
  "code-first-automation-03": {
    "title": "Consider: Code First Automation",
    "type": "panel-double",
    "text1": "<div>A code-first approach to test automation ...</div> <ol> <li><span class=orange>Efficiency & Speed</span>: One of the biggest advantages of a code-first approach is efficiency.</li> <li><span class=orange>More Suitable for API Testing</span>: Cleaner, more direct, and faster.</li> <li><span class=orange>Easier Debugging & Failure Analysis</span>: Identifying the failing step in the Feature File is the first action to debug where a failure might be. Only then can you begin start to isolate and identify what the root cause might be.</li> </ol>",
    "text2": "<div class=level-one> <span class=color-purple>Feature</span><span class=code-white>:</span> <span class=code-red>Effective Use of Gherkin in Automated Testing</span> (<span class=code-white>continued</span>) </div> <div class=level-two><span class=code-purple>Scenario</span><span class=code-white>:</span> <span class=code-red>Gaining practical insights into Gherkin usage</span> </div> <div class=level-three> <span class=code-orange>Given</span> <span class=code-white>attendees are seeking practical tips for using Gherkin</span> </div> <div class=level-three> <span class=code-orange>When</span> <span class=code-white>they are provided with recommended practices for optimizing Gherkin</span> </div> <div class=level-three> <span class=code-orange>Then</span> <span class=code-white>they can ensure Gherkin is a powerful tool to aid in the development process</span> </div>",
    "notes": "<ul> <li>With the code-first approach, as the test is written directly into the programming language, this makes failure analysis much more straightforward.</li> <li>The error messages will be clear and tied directly to the test logic, without having to trace through the multiple layers of feature files and step definitions.</li> </ul>"
  },

  "gherkin-alternatives-01": {
    "title": "Lightweight Test Documentation",
    "type": "panel-double",
    "text1": "<div class=green>Current ...</div> <ul> <li>Clunky user stories that get built by business</li> <li>Eventually they are passed to the team for refinement</li> </ul> <div class=green>Possible ...</div> <ul> <li>Effective test notes should be added to the story</li> <li>As opposed to Gherkin Scenarios</li> </ul>",
    "text2": "<div class=orange>Valid Login</div> <ul> <li>Verify that a registered user can login with valid credentials</li> <li>Expand test coverage to include different user types (i.e. admin, user, read-only)</li> <li>Use existing credentials from test.ts for consistency</li> <li>Test against multiple devices, browsers, and screens</li> </ul> <div class=orange>Invalid Password Handling</div> <ul> <li>Verify that an appropriate error message displays when the user enters an incorrect password</li> <li>(consider) Mock the authentication endpoint to always return an error response</li> </ul> <div class=orange>API-Level Testing</div> <ul> <li>Isolate the auth endpoint and create API tests to validate login behavior under various conditions</li> </ul>",
    "notes": "<div class=green>Current ...</div> <ul> <li>Clunky user stories that get built by business</li> <li>Eventually they are passed to the team for refinement</li> </ul> <div class=green>Possible ...</div> <ul> <li>Effective test notes should be added to the story</li> <li>As opposed to Gherkin Scenarios</li> </ul> <div class=orange>Valid Login</div> <ul> <li>Verify that a registered user can login with valid credentials</li> <li>Expand test coverage to include different user types (i.e. admin, user, read-only)</li> <li>Use existing credentials from test.ts for consistency</li> <li>Test against multiple devices, browsers, and screens</li> </ul> <div class=orange>Invalid Password Handling</div> <ul> <li>Verify that an appropriate error message displays when the user enters an incorrect password</li> <li>(consider) Mock the authentication endpoint to always return an error response</li> </ul> <div class=orange>API-Level Testing</div> <ul> <li>Isolate the auth endpoint and create API tests to validate login behavior under various conditions</li> </ul> <div>These notes are primarily meant for whichever tester picks it up. If Gherkin scenarios were used as the means for what tests should be written, this information might be lost.</div> <br/><br/> <div>This method allows developers, testers, and product owners to contribute meaningfully in a way that fits their expertise. Developers can provide insight into test data and mocking strategies, while testers can refine coverage based on system behaviours.</div>"
  },

  "gherkin-definition-03b": {
    "title": "When is Gherkin Used",
    "type": "panel-single-table",
    "table": [
      [
        "<div class=green>Card Type</div>",
        "Gherkin First",
        "Impact",
        "Alternative"
      ],
      [
        "<div class=green>Epics</div>",
        "NO",
        "",
        ""
      ],
      [
        "<div class=green>Stories</div>",
        "<div class=bold>Behavior Driven Development</div>",
        "Too General",
        "Effective Test Notes"
      ],
      [
        "<div class=green>Tasks</div>",
        "(often)",
        "Specific",
        "Effective Code First and Test Notes"
      ],
      [
        "<div class=green>Sub-Tasks</div>",
        "(often)",
        "Too Specific (or not used)",
        "Effective Code First and Test Notes"
      ],
      [
        "<div class=green>Bugs</div>",
        "(somtimes)",
        "<div class=bold>Good Fit</div>",
        "<div class=bold>Gherkin</div>"
      ],
      [
        "<div class=green>Custom</div>",
        "?",
        "?",
        "?"
      ]
    ],
    "notes": "<div>Here are the Gherkin alternatives that can be used effectively.</div> <ul> <li>Card Type: <span class=green>EPIC</span>: <span class=orange>No real alternative; doesn't use Gherkin.</span></li> <li>Card Type: <span class=green>STORY</span>: <span class=orange>Effective Test Notes</span></li> <li>Card Type: <span class=green>TASK</span>: <span class=orange>Effective Code First and Test Notes</span></li> <li>Card Type: <span class=green>SUB-TASKS</span>: <span class=orange>Effective Code First and Test Notes</span></li> <li>Card Type: <span class=green>BUGS</span>: <span class=orange>Use Gherkin</span></li> <li>Card Type: <span class=green>CUSTOM</span>: <span class=orange>?</span></li> </ul>"
  },
  "gherkin-definition-04": {
    "title": "How is Gherkin Used",
    "type": "panel-double",
    "text1": "<div class=green>Organization uses ...</div> <ul> <li>Behavior-Driven Development (BDD)</li> <li>Story Test-Driven Development (Feature, SDD)</li> <li>Test-Driven Development (TDD)</li> <li>Acceptance Test-Driven Development (ATDD)</li> </ul> <div class=green>Gherkin implementations ...</div> <ul> <li>Not used or used minimally.</li> <li>Used correctly (unicorn).</li> <li>Tripping hazard (everywhere).</li> </ul> <div class=green>Developer Notes and Test Documentation ...</div> <ul> <li>Often shoved into Comments.</li> <li>Occasionally added by 3-Amigos</li> </ul>",
    "text2": "<div class=center><img class=match-height src=\"./assets/images/tripping-unicorn.webp\" /></div>",
    "notes": "<div class=green>Organization uses ...</div> <ul> <li>Behavior-Driven Development (BDD)</li> <li>Story Test-Driven Development (Feature, SDD)</li> <li>Test-Driven Development (TDD)</li> <li>Acceptance Test-Driven Development (ATDD)</li> </ul> <div class=green>Gherkin implementations ...</div> <ul> <li>Not used or used minimally.</li> <li>Used correctly (unicorn).</li> <li>Tripping hazard (everywhere).</li> </ul> <div class=green>Developer Notes and Test Documentation ...</div> <ul> <li>Often shoved into Comments.</li> <li>Occasionally added by 3-Amigos</li> </ul> <div class=green> Personally ...</div> <ul> <li>Playwright is a new tool out.</li> <li>I'm able to write Automated Tests using patterns I learned writing Unit and Integration Tests.</li> <li>Does this really need and additional layer of abstraction?</li> <li>To me, it's easy to read and understand as code.</li> </ul>"
  },

  "time-for-questions": {
    "title": "",
    "type": "image-only",
    "background": "transparent",
    "image": "./assets/images/time-for-questions--case-against-gherkin-qr.webp",
    "notes": ""
  }
}