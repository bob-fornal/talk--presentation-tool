{
  "ORDER": [
    "cover-01",

    "what-is-devops",
    "what-is-the-agile-model",

    "devops-testing--what-is",
    "devops-testing--what-does-it-mean",

    "devops-testing--strategy",
    "devops-testing--implementation",
    "devops-testing--pros",
    "devops-testing--cons",

    "devops-testing--where",
    "the-big-question",
    "the-netflix-question",

    "devops-testing--methodologies--1",
    "devops-testing--methodologies--2",
    "devops-testing--methodologies--3",
    "devops-testing--best-practices",

    "time-for-questions"
  ],

  "STYLE": [
    ".outer-wrapper {",
    "  background: url(\"./assets/images/--bg-grid--green.webp\");",
    "  background-repeat: no-repeat;",
    "  background-size: cover;",
    "  color: #69f0ae;",
    "  font-family: Arial, sans-serif;",
    "}",
    ".italic {",
    "  font-style: italic;",
    "}",
    ".italic-green {",
    "  font-style: italic;",
    "  font-weight: bold;",
    "  color: #69f0ae;",
    "}",
    ".bold-green {",
    "  font-weight: bold;",
    "  color: #69f0ae;",
    "}",
    ".indented {",
    "  padding-left: 1em;",
    "}",
    ".indent-padded {",
    "  padding: 1em;",
    "}",
    ".code {",
    "  color: yellow;",
    "  font-family: Menlo, Monaco, \"Courier New\", monospace;",
    "}",
    ".img[src='./assets/images/testing-pyramid.png'],",
    ".img[src='./assets/images/can-we-test-here.svg'] {",
    "  background-color: #0f0f0faf;",
    "  max-width: 100% !important;",
    "}",
    ".panel--image:has(.img[src='./assets/images/agile-methodology.webp']),",
    ".panel--image:has(.img[src='./assets/images/dev-ops-loop.webp']) {",
    "  background-color: #0f0f0faf;",
    "  height: 100%;",
    "  display: flex !important;",
    "  align-items: center;",
    "",
    "  .img[src='./assets/images/agile-methodology.webp'],",
    "  .img[src='./assets/images/dev-ops-loop.webp'] {",
    "    background-color: #0f0f0faf !important;",
    "    border: none !important;",
    "    width: 80% !important;",
    "    padding: 10% !important;",
    "  }",
    "}",
    ".panel--image:has(.img[src='./assets/images/agile-best-practices.svg']) {",
    "  background-color: white;",
    "  height: 100%;",
    "  display: flex !important;",
    "  align-items: center;",
    "}",
    ".img[src='./assets/images/agile-best-practices.svg'] {",
    "  border: none !important;",
    "  background-color: transparent !important;",
    "}"
  ],
  
  "cover-01": {
    "title": "The Impact of Testing on a DevOps Pipeline",
    "type": "cover-01",
    "author": "Bob Fornal",
    "bio1": "<img class=bio-logo src=./assets/images/code-squid.webp /><br/><div class=\"bold bio-header\">Entrepreneur</div>Code-squid provides solid, in-depth frontend training that is supported with real-world code projects. Blessed husband and proud father of two.",
    "bio2": "<img class=bio-logo src=./assets/images/leading-edje.webp /><br/><div class=bold>Senior Solutions Developer</div><div class=\"bold bio-header\">Leading EDJE, Inc.</div>Passionate about learning, testing, mentoring, speaking, and personal growth.",
    "notes": "I've recently been working on \"fullstack\" Azure DevOps (using Terraform) with Function App, database, and frontend code."
  },
  "edje-about": {
    "title": "",
    "type": "GLOBAL/edje-about--centered",
    "visibility": true,
    "notes": ""
  },

  "what-is-devops": {
    "title": "What is Devops?",
    "type": "image-text",
    "orientation": "right",
    "text1": "<div><span class=bold-green>The Goal</span> ...</div> <div class=indent-padded>To build better, faster and more responsive software <span class=bold-green>by</span> bringing Development and Operations teams together.</div> <div><span class=bold>DevOps</span> ...</div> <div class=indent-padded>Is a <span class=bold-green>cultural shift</span> to remove the barriers for <span class=bold-green>shorter and more frequent</span> software deliveries, and to respond well to changing business requirements.</div> <div>The <span class=bold-green>cultural shift</span> depends on continuously optimizing:</div> <ul><li>Workflow</li><li>Architecture</li><li>Infrastructure</li></ul>",
    "image": "./assets/images/dev-ops-loop.webp",
    "notes": "<ul><li>DevOps is all about streamlining and automating your entire software delivery lifecycle.</li><li>It starts with adopting the agile best practice of CI, where developers check code into a shared repository several times a day.</li><li>Each check-in is then verified by an automated build, allowing teams to detect errors and conflicts as soon as possible.</li><li>Automation frameworks and CI tools such as Jenkins and Bamboo are also used to build, test and deploy applications automatically when requirements change in order to speed up the release process.</li><ul>"
  },
  "what-is-the-agile-model": {
    "title": "What is the Agile Model?",
    "type": "image-text",
    "orientation": "left",
    "text1": "<div>Software developed with the Agile Model adheres to the following four basic priorities:</div><ol><li>Individuals and interactions over processes and tools;</li><li><span class=bold-green>Working software</span> over comprehensive documentation;</li><li>Customer collaboration over contract negotiation; and</li><li><span class=bold-green>Responding to change</span> over following a plan.</li></ol> <div>In Agile development:</div><ul><li>A <span class=bold-green>test-first approach</span> is used, rather than a test-at-the-end approach, when developing.</li><li>Code is developed <span class=bold-green>and tested</span> in small increments of functionality.</li></ul>",
    "image": "./assets/images/agile-methodology.webp",
    "notes": "<ul><li>Agile is a way of focusing on people and interactions, working software, and responding to change.</li><li>Agile uses a test-first approach against small sets of functional code.</li></ul>"
  },

  "devops-testing--what-is": {
    "title": "What is Continuous Testing?",
    "type": "panel-double",
    "text1": "<div><span class=bold-green>Testing is done by the whole team</span> (not just designated testers or quality assurance professionals).</div> <ul><li>Shared responsibility for attaining the highest quality.</li><li>Equal responsibility for the success of the project.</li></ul>",
    "text2": "<div>Unit and Component Testing ...</div><ul><li>Written by developers.</li><li>Using <span class=bold-green>Test-Driven Development</span> (TDD)</li><li>TDD helps think through the desired behavior.</li></ul> <div>Collaboration ...</div> <ul><li>QA, devs, and non-technical / business.</li><li>Using tools like <span class=bold-green>Cucumber (GIVEN, WHEN, THEN format)</span>.</li></ul>",
    "notes": "<ul><li>The WHOLE set of testing throughout the DevOps cycle.</li><li>It is also about the responsibility to create something of the highest quality.</li></ul>"
  },

  "devops-testing--what-does-it-mean": {
    "title": "DevOps Continuous Testing: What does it mean?",
    "type": "panel-single-table",
    "table": [
      [
        "Activity",
        "Detail"
      ], [
        "<div class=bold>Early Detection of Defects</div>",
        "<ul class=table-ul><li>Automated tests are run as soon as code changes are committed, providing immediate feedback to developers.</li><li>This early detection helps prevent the accumulation of defects, reducing the time and effort required to address issues later in the development cycle.</li></ul>"
      ], [
        "<div class=bold>Faster Release Cycles</div>",
        "<ul class=table-ul><li>Accelerate software delivery, ensure high-quality digital experiences across diverse platforms, and meet evolving customer demands.</li></ul>"
      ], [
        "<div class=bold>Improved Collaboration</div>",
        "<ul class=table-ul><li>Collaboration between development and operations teams.</li><li>Automated testing provides a common framework for both teams to work within, promoting shared responsibility for quality.</li></ul>"
      ], [
        "<div class=bold>Enhanced Test Coverage</div>",
        "<ul class=table-ul><li>Leverages automation to achieve extensive test coverage over a wide range of scenarios.</li><li>Ensuring all aspects of the application are thoroughly validated, reducing the risk of undetected issues in production.</li></ul>"
      ]
    ],
    "notes": "<ul><li>Early detection of defects.</li><li>Faster release cycles.</li><li>Improved collaboration (dev and ops)</li><li>Enhanced Test Coverage: including unit tests, integration tests, and end-to-end tests</li></ul>"
  },

  "devops-testing--strategy": {
    "title": "DevOps Continuous Testing: Strategy",
    "type": "panel-double",
    "text1": "<div>Basic Agile Testing and Development Methodology:</div><div>(and the aim of most DevOps projects)</div> <ul><li>Automate manual processes.</li><li>Equal responsibility.</li><li>The whole team tests.</li><li>Testing is done continuously: <span class=bold-green>Early, Often, and After</span>.</li></ul>",
    "text2": "<div class=bold>Roadblocks</div><ul><li>Handoffs (e.g. from Development Team to a QA Team).</li><li>Required signoff; bureaucratic approval.</li><li>Slow, error-prone manual processes and checks.</li><li>Poor-quality, big-bang rollouts that fail in production.</li></ul>",
    "notes": "<div>Agile Testing and Development</div> <ul><li>To automate as many manual processes as possible.</li><li>Equal responsibility for quality and success of product/project.</li><li>The whole team (including developers, testers and operations people) test.</li><li>Testing is done continuously; early, often, and even after applications are in production.</li></ul> <div class=bold>Roadblocks</div>"
  },
  "devops-testing--implementation": {
    "title": "DevOps Continuous Testing: Implementation",
    "type": "panel-single-table",
    "table": [
      [
        "Activity",
        "Detail"
      ], [
        "<div class=bold>Continuous Testing</div><div>(<span class=bold>shift-left testing</span>)</div>",
        "<div>A key element of a successful DevOps Continuous Testing strategy for pipelines.</div><ul class=table-ul><li>Performed earlier in the software lifecycle,</li><li>With the goal of increasing quality,</li><li>Shortening long test cycles,</li><li>Reducing the possibility of software defects making their way into production code.</li></ul></td>"
      ], [
        "<td class=center><div class=bold>Continuous Development</div>",
        "<div>The first stage in implementing a Continuous Delivery DevOps pipeline.</div><ul class=table-ul><li>Developers write Unit Tests for each piece of code they write (prefer TDD).</li><li>New features are checked into a central code base, built, and tested.</li></ul>"
      ], [
        "<div class=bold>Continuous Integration</div>",
        "<div>The use a version control system and integrate work frequently in the same location (main branch).</div><ul class=table-ul><li>Each change is tested in order to detect any integration errors as quickly as possible.</li><li>The build happens automatically rather than when a developer triggers the process manually.</li><li>Once an application passes all required tests, it's then released into production.</li></ul>"
      ]
    ],
    "notes": "<ul><li>Continuous Testing (Shift-Left Testing)</li><li>Continuous Development</li><li>Continuous Integration</li></ul>"
  },
  "devops-testing--pros": {
    "title": "DevOps Continuous Testing: Pros",
    "type": "panel-single-table",
    "table": [
      [
        "Activity",
        "Detail"
      ], [
        "<div class=bold>Quick Delivery</div>",
        "<ul class=table-ul><li>New functionality to users within minutes</li></ul>"
      ], [
        "<div class=bold>Fast Feedback</div>",
        "<ul class=table-ul><li>Instant feedback that, in turn, allows rapid response to customer demand.</li></ul>"
      ], [
        "<div class=bold>Handling Risk</div>",
        "<ul class=table-ul><li>Risk-based Testing: Identifying the highest-risk areas of a software application and focusing testing efforts on those areas.</li></i>This approach helps to ensure that the most critical areas of the application are thoroughly tested.</li><li>Reduces testing time and effort in areas that are less important.</li></ul>"
      ]
    ],
    "notes": "<ul><li>Quick Delivery</li><li>Fast Feedback</li><li>Handling Risk</li></ul>"
  },
  "devops-testing--cons": {
    "title": "DevOps Continuous Testing: Cons",
    "type": "panel-single-table",
    "table": [
      [
        "Activity",
        "Detail"
      ], [
        "<div class=bold>Bugs in Production</div>",
        "<ul class=table-ul><li>Risk of releasing buggy software into production faster.</li></ul>"
      ], [
        "<div class=bold>Loss of Customers</div>",
        "<ul class=table-ul><li>Alienate users and cause your company to lose customers.</li></ul>"
      ], [
        "<div class=bold>Tech Limitations</div>",
        "<ul class=table-ul><li>TA 2022 Mabl report found that 53% of respondents indicated that technology limitations were holding back their testing strategies.</li></ul>"
      ], [
        "<div class=bold>Budget Constraints</div>",
        "<ul class=table-ul><li>1-in-3 aspiring DevOps teams reported budget as their most pressing obstacle.</li></ul>"
      ]
    ],
    "notes": "<ul><li>Bugs in Production</li><li>Loss of Customers</li><li>Tech Limitations</li><li>Budget Constraints</li></ul>"
  },

  "devops-testing--where": {
    "title": "DevOps Testing: Where?",
    "type": "image-only",
    "background": "transparent",
    "image": "./assets/images/can-we-test-here.svg",
    "notes": "<ul><li>Where does Continuous Testing occur?</li><li>Continuous Testing should be integrated all throughout the system to ensure proper coverage.</li></ul>"
  },
  "the-big-question": {
    "title": "The BIG Question",
    "type": "panel-single",
    "text1": "<div><span class=bold>What I didn't ask (right away)?</span></div><div>(How do we test IaC?)</div> <ul><li><span class=code>terraform validate</span> - syntax of code.</li><li><span class=code>tfsec</span> - linting: validate for errors, deprecated syntax, and security checks.</li><li><span class=code>terraform plan</span> - dry run and/or unit testing.</li><li><span class=bold>Terratest</span> - deploying in a test environment to test results.</li><li>Azure Resource Graph REST API - integration tests against actual infrastructure.</li></ul>",
    "notes": "This was a question I heard and didn't account for when writing this talk."
  },
  "the-netflix-question": {
    "title": "The NETFLIX Question",
    "type": "panel-double",
    "text1": "<div><span class=bold>Now does Netflix release so quickly?</div><ul><li><span class=bold-green>214 Million Subscribers</span>.</li><li><span class=bold-green>190 Countries</span>.</li></ul><ol><li>Moved to the Cloud (AWS).</li><li>Netflix's Chaos Monkey and the Simian Army.</li><li>Azure Resource Graph REST API - integration tests against actual infrastructure.</li><li>Every engineer has full access to the production environment.</li></ul>",
    "text2": "<div class=bold>Chaos Monkey</div><br/><div class=indent>A script that runs continuously in all environments, randomly killing production instances and services in the architecture.</div><br/><div class=bold>Simian Army</div> <ul><li>Lateny Monkey (false delays)</li><li>Conformity Monkey (watches for failure of best practices)</li><li>Doctor Monkey (unhealthy instances)</li><li>Janitor Monkey (discards unused instances)</li><li>Security Monkey (eliminates identified security violations)</li><li>10-18 Monkey (localization)</li><li>Chaos Gorilla (Zone-level failure)</li></ul>",
    "notes": "<ol><li>2008 - database corruption; couldn't ship DVDs for three days. The migration to AWS took seven years.</li><li>Wanted to be prepared for any unseen errors that could cause them equivalent or worse damage in the future. Chaos Monkey and the Simian Army.</ol>"
  },


  "devops-testing--methodologies--1": {
    "title": "DevOps Continuous Testing: Methodologies (1/3)",
    "type": "panel-single-table",
    "table": [
      [
        "Activity",
        "Detail"
      ], [
        "<div class=bold>Shift-Left Testing</div>",
        "<ul class=table-ul><li>Prioritizing early software and system testing in the Software Development Life Cycle (SDLC) to minimize debugging challenges later in the process.</li></ul>"
      ], [
        "<div class=bold>Shift-Right Testing</div>",
        "<ul class=table-ul><li>Emphasizing testing towards the end of the SDLC to enhance user experience, overall performance, failure tolerance, and functionality.</li></ul>"
      ], [
        "<div class=bold>Smoke Tests</div>",
        "<ul class=table-ul><li>Initial, cursory screenings (manual or automated) for glaring flaws in software, offering a swift and cost-effective solution for eliminating gross errors.</li></ul>"
      ], [
        "<div class=bold>Unit & Component Testing</div>",
        "<ul class=table-ul><li>Ideal for small-scale stress, load, volume, or memory leak checks in early developmental stages to identify potential degradations.</li></ul>"
      ]
    ],
    "notes": "<ul><li>Shift-Left Testing: Earlier in Software Life Cycle</li><li>Shift-Right Testing: End of the Software Life Cycle; user experience, performance, failt tolerance, functionality.</li><li>Smoke Tests: Cursory on critcal paths.</li><li>Unit & Component Testing: Small-scale stress testing.</li></ul>"
  },
  "devops-testing--methodologies--2": {
    "title": "DevOps Continuous Testing: Methodologies (2/3)",
    "type": "panel-single-table",
    "table": [
      [
        "Activities",
        "Detail"
      ], [
        "<div class=bold>Integration & Message Testing</div>",
        "<ul class=table-ul><li>Checking errors when software modules collaborate, with continuous testing in DevOps virtualizing missing dependencies to assess end-to-end processes and scenarios.</li></ul>"
      ], [
        "<div class=bold>Performance Testing</div>",
        "<ul class=table-ul><li>Assessing application software performance, with integrated system testing required to evaluate overall solution performance, accounting for hardware and middleware in the final production environment.</li></ul>"
      ], [
        "<div class=bold>Functional Testing</div>",
        "<ul class=table-ul><li>Verifying if the user experience aligns with expectations and if functional workflows are executed across the software system as needed.</li></ul>"
      ]
    ],
    "notes": "<ul><li>Integration & Message Testing: Collaboration over scenarios and processes.</li><li>Performance Testing: Overall solution performance.</li><li>Functional Testing: Experience versus expectations.</li></ul>"
  },
  "devops-testing--methodologies--3": {
    "title": "DevOps Continuous Testing: Methodologies (3/3)",
    "type": "panel-single-table",
    "table": [
      [
        "Activity",
        "Detail"
      ], [
        "<div class=bold>Regression Testing</div>",
        "<ul class=table-ul><li>Ensuring no changes in performance, functionality, or dependencies after correcting errors in dependent software, maintaining system performance.</li></ul>"
      ], [
        "<div class=bold>User-Acceptance Testing</div>",
        "<ul class=table-ul><li>Also known as application or end-user testing, assessing the application in real-world situations by a subset of intended users.</li></ul>"
      ]
    ],
    "notes": "<ul><li>Regression Testing: Stable performance, functionality and dependencies over time.</li><li>User-Acceptance Testing: Real world situations by a subset of real users.</li></ul>"
  },
  "devops-testing--best-practices": {
    "title": "DevOps Continuous Testing: Best Practices",
    "type": "image-text",
    "orientation": "right",
    "text1": "<div class=bold>Automate as Many Tests as You Can</div><ul><li>Continuous Testing means testing early, often, and after.</li><li>Eliminate much of the risk that comes with CI/CD.</li><li>Get quick feedback on application quality.</li><li>Reduces the opportunity for new errors.</li></ul><div class=bold>Use Pair Testing & Pair Programming</div><ul><li>On non-automated tests.</li><li>Knowledge Transfer is an efficient way to train new members and maintain velocity.</li><li>One tests; the other analyzes or reviews the results.</li><li>Useful in breaking down communication barriers.</li></ul>",
    "image": "./assets/images/agile-best-practices.svg",
    "notes": "<ol><li>Test early and often.</li><li>Eliminate risk with CI/CD.</li><li>Quick feedback on quality.</li><li>Reduce opportunity for new errors.</li></ol><div>Pair Testing / Programming</div><ul><li>Tests that are challenging to automate.</li><li>Knowledge transfer.</li><li>Test versus analyze.</li><li>Break down communication barriers.</li></ul>"
  },

  "time-for-questions": {
    "title": "",
    "type": "image-only",
    "background": "transparent",
    "image": "./assets/images/time-for-questions--iotdevops-qr.png",
    "notes": ""
  }
}